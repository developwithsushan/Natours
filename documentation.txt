NPM Packages Installation Guidelines
npm init 
npm install node-sass --save-dev
npm install jquery --save 
npm install live-server -g 



Responsive Design Principles 
1. Fluid Layouts
 - To allow webpage to adapt to the current viewport width (or even height)
 - use % (or vh / vw) instead of px for elements that should adapt to viewport (usually layout)
 - use max-width instead of width 

2. Responsive Units
  - use rem unit instead of px for most lengths
  - to make it easy to scale the entire layout down (or up) automatically

3. Flexible Images
- By default, images dont scale automatically as we change the viewport, so we need to fix that
- always use % for image dimensions, together with the max-width property 

4. Media queries
 - to change css styles on certain viewpoint width (called breakpoints)


Layouts Types 
1. Float Layouts : The old way of building layouts of all sizes, using the float css property. Still used, but getting outdated.
2. Flexbox : Modern way of laying out elements in a 1-dimensional row without using floats. Perfect for components layouts
3. CSS Grid : For laying out element in a fully-fledged 2-dimensional grid. Perfec for page layouts and complex components. 



SELECTING OUR BREAKPOINTS : A GOOD APPROACH
1. PHONE ONLY
    320x568
    360x640
    375x667
    480x800

2. TABLET PORTRAIT
   720x1280
   768x1024

3. TABLET LANDSCAPE
   1024x768

4. DESKTOP
    1280x800
    1280x1024

    1336x768

    1440x900

    1600x900

 5. BIG DESKTOP
    1920x1080


 What are Responsive Images Anyway ?
  Responsive Images - The goal of responsive images is to serve the right image to the right screen size
  and device in order to avoid downloading unnecessary large images on smaller screens.

  How to Use Responsive Images : 3 Use Cases
  1. Resolution Switching  - Decrease image resolution on smaller screen
  2. Density Switching  - Half the image resolution on @1x screen
  3. Art Direction -  Different images on smaller screen,  image details are preserved but the image is different